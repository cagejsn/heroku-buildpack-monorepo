#!/usr/bin/env bash

# Ensure wildcards in globs match dotfiles too.
shopt -s dotglob

indent() {
    sed -u 's/^/      /'
}

BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"
STAGE="$(mktemp -d)"

if [ ! -f "${ENV_DIR}/APP_BASE" ]; then
    echo "APP_BASE was not set. Aborting" | indent
    exit 1
fi
APP_BASE="$(cat "${ENV_DIR}/APP_BASE")"


if [ -f "${ENV_DIR}/OTHER_REQUIRED_DIRECTORIES" ]; then
    OTHER_REQUIRED_DIRECTORIES="$(cat "${ENV_DIR}/OTHER_REQUIRED_DIRECTORIES")"
fi

if [ -n "$OTHER_REQUIRED_DIRECTORIES" ]; then

    echo "will attempt to move '${APP_BASE}' and '${OTHER_REQUIRED_DIRECTORIES}' to root of app" | indent

    for OTHER_REQUIRED_DIRECTORY in $( echo -n "$OTHER_REQUIRED_DIRECTORIES" | tr ',' ' ' ); do

        echo "moving: $OTHER_REQUIRED_DIRECTORY" | indent
   
        mv "${BUILD_DIR}/${OTHER_REQUIRED_DIRECTORY}" "${STAGE}" 
        if [ $? -ne 0 ]; then
        echo "FAILED to copy "$OTHER_REQUIRED_DIRECTORY" into place" | indent
        exit 1
        fi

    done

    (
        mv "${BUILD_DIR}/${APP_BASE}" "${STAGE}" &&
        rm -rf "${BUILD_DIR}"/* &&
        mv "${STAGE}/$(basename "$APP_BASE")"/* "${BUILD_DIR}"
    )

    if [ $? -ne 0 ]; then
        echo "FAILED to copy ${APP_BASE} into place" | indent
        exit 1
    fi


    for OTHER_REQUIRED_DIRECTORY in $( echo -n "$OTHER_REQUIRED_DIRECTORIES" | tr ',' ' ' ); do

        NEW_DIR="$(echo $RANDOM | sha1sum | cut -c1-6 )" 
        mkdir -p "${BUILD_DIR}/${NEW_DIR}"

        mv "$STAGE/$(basename $OTHER_REQUIRED_DIRECTORY)"/* "${BUILD_DIR}/${NEW_DIR}"

        sed "s|\.\./${OTHER_REQUIRED_DIRECTORY}|${NEW_DIR}|g" "${BUILD_DIR}/package.json" | tee "${BUILD_DIR}/package.json.new"
        rm "${BUILD_DIR}/package.json"
        mv "${BUILD_DIR}/package.json.new" "${BUILD_DIR}/package.json"

        sed "s|\.\./${OTHER_REQUIRED_DIRECTORY}|${NEW_DIR}|g" "${BUILD_DIR}/package-lock.json" | tee "${BUILD_DIR}/package-lock.json"
        rm "${BUILD_DIR}/package-lock.json"
        mv "${BUILD_DIR}/package-lock.json.new" "${BUILD_DIR}/package-lock.json"
       

    done


    echo "Copied ${APP_BASE} and ${OTHER_REQUIRED_DIRECTORIES} to root of app successfully" | indent

else 

    (
        mv "${BUILD_DIR}/${APP_BASE}" "${STAGE}" &&
        rm -rf "${BUILD_DIR}"/* &&
        mv "${STAGE}/$(basename "$APP_BASE")"/* "${BUILD_DIR}"
    )

    if [ $? -ne 0 ]; then
        echo "FAILED to copy ${APP_BASE} into place" | indent
        exit 1
    fi

    echo "Copied ${APP_BASE} to root of app successfully" | indent

fi


